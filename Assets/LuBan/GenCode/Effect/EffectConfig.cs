//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.Effect
{ 

public sealed partial class EffectConfig :  Bright.Config.BeanBase 
{
    public EffectConfig(JSONNode _json) 
    {
        { if(!_json["Id"].IsNumber) { throw new SerializationException(); }  Id = _json["Id"]; }
        { if(!_json["EffectType"].IsNumber) { throw new SerializationException(); }  EffectType = (Effect.Enum.EffectType)_json["EffectType"].AsInt; }
        { if(!_json["ControlType"].IsNumber) { throw new SerializationException(); }  ControlType = (Effect.Enum.ControlType)_json["ControlType"].AsInt; }
        { if(!_json["EffectTarget"].IsNumber) { throw new SerializationException(); }  EffectTarget = (Effect.Enum.EffectTarget)_json["EffectTarget"].AsInt; }
        { if(!_json["EffectTiming"].IsNumber) { throw new SerializationException(); }  EffectTiming = (Effect.Enum.EffectTiming)_json["EffectTiming"].AsInt; }
        { if(!_json["Duration"].IsNumber) { throw new SerializationException(); }  Duration = _json["Duration"]; }
        { if(!_json["CanStack"].IsBoolean) { throw new SerializationException(); }  CanStack = _json["CanStack"]; }
        { if(!_json["Interval"].IsNumber) { throw new SerializationException(); }  Interval = _json["Interval"]; }
        { if(!_json["Probability"].IsNumber) { throw new SerializationException(); }  Probability = _json["Probability"]; }
        { if(!_json["ValueFormula"].IsString) { throw new SerializationException(); }  ValueFormula = _json["ValueFormula"]; }
        { if(!_json["ValueType"].IsNumber) { throw new SerializationException(); }  ValueType = (Effect.Enum.DamageType)_json["ValueType"].AsInt; }
        { if(!_json["CanCritical"].IsBoolean) { throw new SerializationException(); }  CanCritical = _json["CanCritical"]; }
        PostInit();
    }

    public EffectConfig(int Id, Effect.Enum.EffectType EffectType, Effect.Enum.ControlType ControlType, Effect.Enum.EffectTarget EffectTarget, Effect.Enum.EffectTiming EffectTiming, float Duration, bool CanStack, float Interval, float Probability, string ValueFormula, Effect.Enum.DamageType ValueType, bool CanCritical ) 
    {
        this.Id = Id;
        this.EffectType = EffectType;
        this.ControlType = ControlType;
        this.EffectTarget = EffectTarget;
        this.EffectTiming = EffectTiming;
        this.Duration = Duration;
        this.CanStack = CanStack;
        this.Interval = Interval;
        this.Probability = Probability;
        this.ValueFormula = ValueFormula;
        this.ValueType = ValueType;
        this.CanCritical = CanCritical;
        PostInit();
    }

    public static EffectConfig DeserializeEffectConfig(JSONNode _json)
    {
        return new Effect.EffectConfig(_json);
    }

    public int Id { get; private set; }
    /// <summary>
    /// 效果类型
    /// </summary>
    public Effect.Enum.EffectType EffectType { get; private set; }
    /// <summary>
    /// 控制类型
    /// </summary>
    public Effect.Enum.ControlType ControlType { get; private set; }
    /// <summary>
    /// 作用目标
    /// </summary>
    public Effect.Enum.EffectTarget EffectTarget { get; private set; }
    /// <summary>
    /// 生效时机
    /// </summary>
    public Effect.Enum.EffectTiming EffectTiming { get; private set; }
    /// <summary>
    /// 持续时间(毫秒)
    /// </summary>
    public float Duration { get; private set; }
    /// <summary>
    /// 可否叠加
    /// </summary>
    public bool CanStack { get; private set; }
    /// <summary>
    /// 间隔
    /// </summary>
    public float Interval { get; private set; }
    /// <summary>
    /// 触发概率
    /// </summary>
    public float Probability { get; private set; }
    /// <summary>
    /// 数值公式
    /// </summary>
    public string ValueFormula { get; private set; }
    /// <summary>
    /// 伤害类型
    /// </summary>
    public Effect.Enum.DamageType ValueType { get; private set; }
    /// <summary>
    /// 能否暴击
    /// </summary>
    public bool CanCritical { get; private set; }

    public const int __ID__ = -1367647888;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "EffectType:" + EffectType + ","
        + "ControlType:" + ControlType + ","
        + "EffectTarget:" + EffectTarget + ","
        + "EffectTiming:" + EffectTiming + ","
        + "Duration:" + Duration + ","
        + "CanStack:" + CanStack + ","
        + "Interval:" + Interval + ","
        + "Probability:" + Probability + ","
        + "ValueFormula:" + ValueFormula + ","
        + "ValueType:" + ValueType + ","
        + "CanCritical:" + CanCritical + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
