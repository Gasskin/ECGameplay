//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.Skill
{ 

public sealed partial class SkillConfig :  Bright.Config.BeanBase 
{
    public SkillConfig(JSONNode _json) 
    {
        { if(!_json["Id"].IsNumber) { throw new SerializationException(); }  Id = _json["Id"]; }
        { if(!_json["SkillSpellType"].IsNumber) { throw new SerializationException(); }  SkillSpellType = (Skill.Enum.SkillSpellType)_json["SkillSpellType"].AsInt; }
        { if(!_json["Condition"].IsNumber) { throw new SerializationException(); }  Condition = _json["Condition"]; }
        { if(!_json["ColdTime"].IsNumber) { throw new SerializationException(); }  ColdTime = _json["ColdTime"]; }
        { var __json0 = _json["AttachEffect"]; if(!__json0.IsArray) { throw new SerializationException(); } AttachEffect = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  AttachEffect.Add(__v0); }   }
        PostInit();
    }

    public SkillConfig(int Id, Skill.Enum.SkillSpellType SkillSpellType, int Condition, float ColdTime, System.Collections.Generic.List<int> AttachEffect ) 
    {
        this.Id = Id;
        this.SkillSpellType = SkillSpellType;
        this.Condition = Condition;
        this.ColdTime = ColdTime;
        this.AttachEffect = AttachEffect;
        PostInit();
    }

    public static SkillConfig DeserializeSkillConfig(JSONNode _json)
    {
        return new Skill.SkillConfig(_json);
    }

    public int Id { get; private set; }
    /// <summary>
    /// 技能类型
    /// </summary>
    public Skill.Enum.SkillSpellType SkillSpellType { get; private set; }
    /// <summary>
    /// 技能目标检测方式
    /// </summary>
    public int Condition { get; private set; }
    public Condition.ConditionConfig Condition_Ref { get; private set; }
    /// <summary>
    /// 冷却时间
    /// </summary>
    public float ColdTime { get; private set; }
    /// <summary>
    /// 附加效果
    /// </summary>
    public System.Collections.Generic.List<int> AttachEffect { get; private set; }
    public System.Collections.Generic.List<Effect.EffectConfig> AttachEffect_Ref { get; private set; }

    public const int __ID__ = 1652224150;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        this.Condition_Ref = (_tables["Condition.ConditionTable"] as Condition.ConditionTable).GetOrDefault(Condition);
        { Effect.EffectTable __table = (Effect.EffectTable)_tables["Effect.EffectTable"]; this.AttachEffect_Ref = new System.Collections.Generic.List<Effect.EffectConfig>(); foreach(var __e in AttachEffect) { this.AttachEffect_Ref.Add(__table.GetOrDefault(__e)); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "SkillSpellType:" + SkillSpellType + ","
        + "Condition:" + Condition + ","
        + "ColdTime:" + ColdTime + ","
        + "AttachEffect:" + Bright.Common.StringUtil.CollectionToString(AttachEffect) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
